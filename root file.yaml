swagger: '2.0'
info:
  version: '1.0'
  title: Pockyt API 
  description: |-
    # Introduction

    Pockyt is a payment gateway utilized by various companies in retail and online to process payments, offering a digital wallet for seamless transfers and processing payments through point-of-sale systems, In-store payment, and Pay-out services.
    # Overview

    Pockyt API provides a powerful solution for integrating custom payment forms seamlessly into your website or application. By utilizing both client- and server-side code, the API enables the creation of a user-friendly checkout form with all necessary payment elements included for the chosen payment method. This allows for a streamlined payment process, making it easier for customers to complete transactions and for businesses to manage their payment processing

    # Quickstart Tutorial

     Pockyt offers a secure and user-friendly payment experience for customers, supporting a variety of payment methods such as digital wallets and card payments. Pockyt partners with multiple digital wallet providers, enabling businesses to attract and retain digital-native customers from all over the world. n endpoint

     We recommend completing our quickstart tutorial on Pockyt products to learn key concepts. 

     1 - Hosted Pages

     2 - Digital Wallets 

     3 - Credit Card

    The same Please note that all the tutorials and explanations in this document will reference the Pockyt's base Sandbox URLs

     *  A Sandbox API's Base URL  "https://mapi.yuansfer.yunkeguan.com"

     *  Production API's Base URL's "https://mapi.yuansfer.com/"

    # Payment Methods

    Below are our payment integration methods, so you can choose what works best for you

    * Asia Pacific Based Digital Wallets: Alipay, WeChatPay, UnionPay, TrueMoney, AliPay HK, TNG, GCash, Dana, KakaoPay, BKash, EasyPasia

    * US Based Payment Methods: Major Credit Cards: Visa, MasterCard, Discover, Amex, Union Pay, Digital Wallets: Paypal, Venmo, CashApp
    
    # Payment Integration Types

    * **Online** - Online Payments enable e-wallet and payment acceptance, seamlessly integrated into your e-commerce and point-of-sale (POS) platforms. Refer the Documentation

    * **In-store** - In-store payments enable clients to make hassle-free payments through their mobile wallets while maintaining operational efficiency in your stores. Refer the Documentation

    * **Pay-out**  - Effortlessly make payments to influencers, sellers, and contractors worldwide through their preferred payment methods, including digital wallets (such as PayPal and Alipay) and traditional bank accounts. Refer the Documentation

    # Prerequisites 
     Please ensure you have the following accounts and test devices available to complete your implementation project.	
    * Account ID's in the Apple iOS store, and Google Play store, with the iOS TestFlight application installed on your phone.
    * An iOS device and an Android device on which you will download and install the test digital wallet applications from PayPal, AliPay and CashApp to generate payment barcode strings

    #  Guides
    In the Guides section, developers can find comprehensive documentation and detailed explanations of the API's functionality.
    ##  Getting Started with Online Payment APIs
    Our Online digital wallet payment processing APIs help you to understand technical concepts and provide step-by-step tutorials for implementing them.
    ###  Pockyt Developement Sandbox
    High level steps
    * STEP 1 - Setting up a development account with Pockyt.
    
    * STEP 2 - Obtaining  API credentials.
    
      For Obtaining API credentails, you need two sets of credentials from Pockyt to complete your implementation project.
   
      1 - **Sandbox API Credentials and Account Information** enable you to test the entire transaction network relevant to your use cases.
    
      2 - **Production API Credentials and Account Information** enable you to begin processing live transactions from digital wallets and other payment methods.
    * STEP 3 - Installing the test digital wallet applications.
    
    ###   Payment Scenarios and API Endpoints

  contact: {}
host: 
basePath: /
securityDefinitions: {}
schemes:
  - https
consumes:
  - application/json
produces:
  - application/json
paths:
  /Secure payment:
    post:
      description: |-
        ## Request URL

        POST "https://mapi.yuansfer.com/online/v3/secure-pay"

        Secure Payment API enables merchant websites to send customers to Pockyt for payment processing.
      
      summary: Secure payment
      tags:
        - Authentication
      operationId: login
      deprecated: false
      produces:
        - application/json
      consumes:
        - text/plain
      parameters:
        - name: customerNo
          in: header
          required: false
          type: string
          description: Optional- the user's ID in Pockyt System; include this parameter if you wish to map a customer with the payment and request a secure checkout.
        - name: merchantNo 
          in: header
          required: true
          type: string
          description: |-
           Required- A unique value created and assigned by Pockyt`s support team during the onboarding process
        - name: storeNo
          in: header
          required: true
          type: string
          description: Required- A unique value created and assigned by Pockyt`s support team during the onboarding process.
        - name: amount
          in: header
          required: true
          type: string
          description: Required - the transaction amount
        - name: cuurency
          in: header
          required: true
          type: string
          description: Required- the supported transaction currencies are "USD","CNY", "PHP", "IDR", "KRW", "HKD", "THB", "MYR", "GBP","BDT", "PKR"
        - name: settleCuurency
          in: header
          required: true
          type: string
          description: Required- when the currency is "GBP", the settlement currency is "GBP". All other currencies settle with "USD"
        - name: vendor
          in: header
          required: true
          type: string
          description: Required- the possible payment channels are "alipay","wechatpay", "paypal", "venmo", "unionpay", "creditcard", "truemoney", "alipay_hk", "tng", "gcash", "dana", "kakaopay","bkash", "easypaisa","cashapppay"
        - name: ipnUrl
          in: header
          required: true
          type: string
          description: Required- the asynchronous notification address. The IPN URL must be secure. For more information, visit the IPN section.
        - name: callbackUrl
          in: header
          required: true
          type: string
          description: Required- the synchronous callback HTTP address to receive notification messages for events. The callback URL follows macro substitution rules like xxxcallback_url?trans_no= {amount}&amount={amount}. Then Pockyt automatically replaces the values of {} for a list of parameters.
	      - name: reference
          in: header
          required: true
          type: string
          description: Required- the Invoice Number of the transaction in the merchant's system
	      - name: terminal
          in: header
          required: true
          type: string
          description: Required- the possible values are: "ONLINE" for desktop/web app and "WAP" for mobile, YIP for Braintree.
       	- name: description
          in: header
          required: true
          type: string
          description: Optional- The description of the transaction will be displayed on the invoice.
	      - name: note
          in: header
          required: true
          type: string
          description: Optional- The payment notes
        - name: osType
          in: header
          required: true
          type: string
          description: Required when terminal is WAP or APP, the possible values are "IOS" and "ANDROID".
	      - name: timeout
          in: header
          required: true
          type: string
          description: Optional-The timeout in minutes. The default value is 120.
	      - name: goodsInfo
          in: header
          required: true
          type: string
          description: Optional- JSON encoded string of an array of items that thecustomer purchases from the merchant; Special characters are not supported. e.g.: [{"goods_name":"name1", "quantity":"quantity1"}, {"goods_name":"name2", "quantity":"quantity2"}]
	      - name: creditType
          in: header
          required: true
          type: string
          description: Optional- The payment type. This is only required when vendor = creditcard. The values are "normal" or "CIT". The default is "normal".
	      - name: verifySign
          in: header
          required: true
          type: string
          description: Required- the parameter signature. It is the calculated MD5 hash value of the API token used to encrypt the request message and authorize transaction requests. For more information, visit Signing API Parameters
	      - name: storeNo
          in: header
          required: false
          enum:
            - Secure Pay
          type: string
          description: Required- A unique value created and assigned by Pockytâ€™s support team during the onboarding process.
        - name: body
          in: body
          required: true
          type: string
          description: |-
            Specify the email ID and password of the user who wants to login.

            For example,

            * emailID: [email ID]

            * userSecret: [password]
          schema:
            example:
              emailId: '{{emailId}}'
              userSecret: '{{userSecret}}'
      responses:
        '200':
          description: The request is successful.
          headers: {}
        '201':
          description: The request is successful.
          headers: {}
        '400':
          description: Incorrect username or password.
          headers: {}
  /resetPassword:
    post:
      description: Integrated Payment 
      summary: Integrated Payment 

      tags:
        - Authentication
      operationId: resetPassword
      deprecated: false
      produces:
        - application/json
      consumes:
        - text/plain
      parameters:
        - name: Content-Type
          in: header
          required: false
          enum:
            - text/plain
          type: string
          description: ''
        - name: body
          in: body
          required: true
          description: ''
          schema:
            example:
              emailId: '{{emailId}}'
            type: string
      responses:
        '200':
          description: ''
          headers: {}
  /changePassword:
    post:
      description: changePassword
      summary: changePassword
      tags:
        - Authentication
      operationId: changePassword
      deprecated: false
      produces:
        - application/json
      consumes:
        - text/plain
      parameters:
        - name: Content-Type
          in: header
          required: false
          enum:
            - text/plain
          type: string
          description: ''
        - name: body
          in: body
          required: true
          description: ''
          schema:
            example:
              oldPassword: string
              newPassword: string
            type: string
      responses:
        '200':
          description: ''
          headers: {}
  /organization/{orgId}:
    get:
      description: getOrganization
      summary: getOrganization
      tags:
        - Organization
      operationId: getOrganization
      deprecated: false
      produces:
        - application/json
      parameters:
        - name: orgId
          in: path
          required: true
          type: string
          description: ''
      responses:
        '200':
          description: ''
          headers: {}
    patch:
      description: updateOrganization
      summary: updateOrganization
      tags:
        - Organization
      operationId: updateOrganization
      deprecated: false
      produces:
        - application/json
      consumes:
        - text/plain
      parameters:
        - name: orgId
          in: path
          required: true
          type: string
          description: ''
        - name: Content-Type
          in: header
          required: false
          enum:
            - text/plain
          type: string
          description: ''
        - name: body
          in: body
          required: true
          description: ''
          schema:
            example:
              organizationType: '0'
              organizationName: TagNTrac
              website: https://www.tagntrac.com/
              email: contact@tagntrac.com
              spoc: '{{userId}}'
              contactNo: +1 858-357-3236
              status: Active
              remarks: Owner of the TagNTrac Asset Tracking Ecosystem
              createdBy: '{{userId}}'
              address:
                location: 4250 Executive Square UNIT 200
                city: La Jolia
                state: California
                country: USA
                zip: '92037'
            type: string
      responses:
        '200':
          description: ''
          headers: {}
  /organization/{orgId}/projects:
    get:
      description: getProjectsInOrganization
      summary: getProjectsInOrganization
      tags:
        - Organization
      operationId: getProjectsInOrganization
      deprecated: false
      produces:
        - application/json
      parameters:
        - name: orgId
          in: path
          required: true
          type: string
          description: ''
      responses:
        '200':
          description: ''
          headers: {}
  /organization/{orgId}/users:
    get:
      description: getUsersInOrganization
      summary: getUsersInOrganization
      tags:
        - Organization
      operationId: getUsersInOrganization
      deprecated: false
      produces:
        - application/json
      parameters:
        - name: orgId
          in: path
          required: true
          type: string
          description: ''
      responses:
        '200':
          description: ''
          headers: {}
  /organization/{orgId}/devices:
    get:
      description: getDevicesInOrganization
      summary: getDevicesInOrganization
      tags:
        - Organization
      operationId: getDevicesInOrganization
      deprecated: false
      produces:
        - application/json
      parameters:
        - name: deviceType
          in: query
          required: true
          type: string
          description: ''
        - name: page
          in: query
          required: true
          type: string
          description: ''
        - name: orgId
          in: path
          required: true
          type: string
          description: ''
      responses:
        '200':
          description: ''
          headers: {}
  /organization/{orgId}/webhooks:
    get:
      description: getWebhooksInOrganization
      summary: getWebhooksInOrganization
      tags:
        - Organization
      operationId: getWebhooksInOrganization
      deprecated: false
      produces:
        - application/json
      parameters:
        - name: orgId
          in: path
          required: true
          type: string
          description: ''
      responses:
        '200':
          description: ''
          headers: {}
  /organization/{orgId}/assets:
    get:
      description: getAssetsInOrganization
      summary: getAssetsInOrganization
      tags:
        - Organization
      operationId: getAssetsInOrganization
      deprecated: false
      produces:
        - application/json
      parameters:
        - name: assetType
          in: query
          required: true
          type: string
          description: ''
        - name: page
          in: query
          required: true
          type: string
          description: ''
        - name: orgId
          in: path
          required: true
          type: string
          description: ''
      responses:
        '200':
          description: ''
          headers: {}
  /organization/{orgId}/rules:
    get:
      description: getRulesInOrganization
      summary: getRulesInOrganization
      tags:
        - Organization
      operationId: getRulesInOrganization
      deprecated: false
      produces:
        - application/json
      parameters:
        - name: orgId
          in: path
          required: true
          type: string
          description: ''
      responses:
        '200':
          description: ''
          headers: {}
  /organization/{orgId}/zones:
    get:
      description: getZonesInOrganization
      summary: getZonesInOrganization
      tags:
        - Organization
      operationId: getZonesInOrganization
      deprecated: false
      produces:
        - application/json
      parameters:
        - name: orgId
          in: path
          required: true
          type: string
          description: ''
      responses:
        '200':
          description: ''
          headers: {}
  /organization/{orgId}/auditTrail:
    get:
      description: getAuditTrailInOrganization
      summary: getAuditTrailInOrganization
      tags:
        - Organization
      operationId: getAuditTrailInOrganization
      deprecated: false
      produces:
        - application/json
      parameters:
        - name: orgId
          in: path
          required: true
          type: string
          description: ''
      responses:
        '200':
          description: ''
          headers: {}
  /organization/{orgId}/stats:
    get:
      description: getStatsInOrganization
      summary: getStatsInOrganization
      tags:
        - Organization
      operationId: getStatsInOrganization
      deprecated: false
      produces:
        - application/json
      parameters:
        - name: orgId
          in: path
          required: true
          type: string
          description: ''
      responses:
        '200':
          description: ''
          headers: {}
  /organization/{orgId}/devices/period:
    get:
      description: getDevicesNotReportingInPeriod
      summary: getDevicesNotReportingInPeriod
      tags:
        - Organization
      operationId: getDevicesNotReportingInPeriod
      deprecated: false
      produces:
        - application/json
      parameters:
        - name: start
          in: query
          required: true
          type: string
          description: ''
        - name: end
          in: query
          required: true
          type: string
          description: ''
        - name: orgId
          in: path
          required: true
          type: string
          description: ''
      responses:
        '200':
          description: ''
          headers: {}
  /organization/{orgId}/assetRecentdata:
    get:
      description: getRecentReportingAssets
      summary: getRecentReportingAssets
      tags:
        - Organization
      operationId: getRecentReportingAssets
      deprecated: false
      produces:
        - application/json
      parameters:
        - name: orgId
          in: path
          required: true
          type: string
          description: ''
      responses:
        '200':
          description: ''
          headers: {}
  /user:
    post:
      description: Use the **createUser** API to create a new user in the organization. You need to specify the organization ID with the API.
      summary: createUser
      tags:
        - User
      operationId: createUser
      deprecated: false
      produces:
        - application/json
      consumes:
        - text/plain
      parameters:
        - name: Content-Type
          in: header
          required: false
          enum:
            - text/plain
          type: string
          description: ''
        - name: body
          in: body
          required: true
          description: ''
          schema:
            example:
              userName: Venu Gutlapalli
              slug: venug
              email: venug@tagntrac.com
              contact: ''
              avatar: ''
              userSecret: ''
              organizationId: '{{orgId}}'
              role: '0'
              createdBy: ''
            type: string
      responses:
        '200':
          description: ''
          headers: {}
  /user/{userId}:
    get:
      description: getUser
      summary: getUser
      tags:
        - User
      operationId: getUser
      deprecated: false
      produces:
        - application/json
      parameters:
        - name: userId
          in: path
          required: true
          type: string
          description: ''
      responses:
        '200':
          description: ''
          headers: {}
    patch:
      description: updateUser
      summary: updateUser
      tags:
        - User
      operationId: updateUser
      deprecated: false
      produces:
        - application/json
      consumes:
        - text/plain
      parameters:
        - name: userId
          in: path
          required: true
          type: string
          description: ''
        - name: Content-Type
          in: header
          required: false
          enum:
            - text/plain
          type: string
          description: ''
        - name: body
          in: body
          required: true
          description: ''
          schema:
            example:
              userName: Venu Gutlapalli
              slug: venug
              email: venug@tagntrac.com
              contact: ''
              avatar: ''
              userSecret: ''
              organizationId: '{{orgId}}'
              role: '0'
              createdBy: '{{userId}}'
            type: string
      responses:
        '200':
          description: ''
          headers: {}
    delete:
      description: deleteUser
      summary: deleteUser
      tags:
        - User
      operationId: deleteUser
      deprecated: false
      produces:
        - application/json
      parameters:
        - name: userId
          in: path
          required: true
          type: string
          description: ''
      responses:
        '200':
          description: ''
          headers: {}
  /user/{userId}/avatar:
    post:
      description: uploadAvatar
      summary: uploadAvatar
      tags:
        - User
      operationId: uploadAvatar
      deprecated: false
      produces:
        - application/json
      consumes:
        - multipart/form-data
      parameters:
        - name: userId
          in: path
          required: true
          type: string
          description: ''
        - name: file
          in: formData
          required: true
          type: file
          format: file
          description: ''
      responses:
        '200':
          description: ''
          headers: {}
  /project:
    post:
      description: createProject
      summary: createProject
      tags:
        - Project
      operationId: createProject
      deprecated: false
      produces:
        - application/json
      consumes:
        - text/plain
      parameters:
        - name: Content-Type
          in: header
          required: false
          enum:
            - text/plain
          type: string
          description: ''
        - name: body
          in: body
          required: true
          description: ''
          schema:
            example:
              projectName: Wisconsin Vaccine Warehouse
              shortName: Wisconsin
              organizationId: '{{orgId}}'
              sourceAddress:
                location: 4250 Executive Square UNIT 200
                city: La Jolia
                state: California
                country: USA
                zip: '92037'
              destinationAddress:
                location: 4250 Executive Square UNIT 200
                city: La Jolia
                state: California
                country: USA
                zip: '92037'
              createdBy: '{{userId}}'
            type: string
      responses:
        '200':
          description: ''
          headers: {}
  /project/{projectId}:
    get:
      description: getProject
      summary: getProject
      tags:
        - Project
      operationId: getProject
      deprecated: false
      produces:
        - application/json
      parameters:
        - name: projectId
          in: path
          required: true
          type: string
          description: ''
      responses:
        '200':
          description: ''
          headers: {}
    patch:
      description: updateProject
      summary: updateProject
      tags:
        - Project
      operationId: updateProject
      deprecated: false
      produces:
        - application/json
      consumes:
        - text/plain
      parameters:
        - name: projectId
          in: path
          required: true
          type: string
          description: ''
        - name: Content-Type
          in: header
          required: false
          enum:
            - text/plain
          type: string
          description: ''
        - name: body
          in: body
          required: true
          description: ''
          schema:
            example:
              projectName: ''
              shortName: ''
              organizationId: ''
              createdBy: ''
            type: string
      responses:
        '200':
          description: ''
          headers: {}
    delete:
      description: deleteProject
      summary: deleteProject
      tags:
        - Project
      operationId: deleteProject
      deprecated: false
      produces:
        - application/json
      parameters:
        - name: projectId
          in: path
          required: true
          type: string
          description: ''
      responses:
        '200':
          description: ''
          headers: {}
  /project/{projectId}/users:
    post:
      description: addUsersToProject
      summary: addUsersToProject
      tags:
        - Project
      operationId: addUsersToProject
      deprecated: false
      produces:
        - application/json
      consumes:
        - text/plain
      parameters:
        - name: projectId
          in: path
          required: true
          type: string
          description: ''
        - name: Content-Type
          in: header
          required: false
          enum:
            - text/plain
          type: string
          description: ''
        - name: body
          in: body
          required: true
          description: ''
          schema:
            example:
              users:
                - userId: '{{userId2}}'
                  role: '0'
              createdBy: '{{userId}}'
            type: string
      responses:
        '200':
          description: ''
          headers: {}
    get:
      description: getUsersInProject
      summary: getUsersInProject
      tags:
        - Project
      operationId: getUsersInProject
      deprecated: false
      produces:
        - application/json
      parameters:
        - name: projectId
          in: path
          required: true
          type: string
          description: ''
      responses:
        '200':
          description: ''
          headers: {}
    patch:
      description: updateUsersInProject
      summary: updateUsersInProject
      tags:
        - Project
      operationId: updateUsersInProject
      deprecated: false
      produces:
        - application/json
      consumes:
        - text/plain
      parameters:
        - name: projectId
          in: path
          required: true
          type: string
          description: ''
        - name: Content-Type
          in: header
          required: false
          enum:
            - text/plain
          type: string
          description: ''
        - name: body
          in: body
          required: true
          description: ''
          schema:
            example:
              users:
                - userId: '{{userId2}}'
                  role: '0'
              createdBy: '{{userId}}'
            type: string
      responses:
        '200':
          description: ''
          headers: {}
  /project/{projectId}/devices:
    get:
      description: getDevicesInProject
      summary: getDevicesInProject
      tags:
        - Project
      operationId: getDevicesInProject
      deprecated: false
      produces:
        - application/json
      parameters:
        - name: deviceType
          in: query
          required: true
          type: string
          description: ''
        - name: page
          in: query
          required: true
          type: string
          description: ''
        - name: projectId
          in: path
          required: true
          type: string
          description: ''
      responses:
        '200':
          description: ''
          headers: {}
  /device/{deviceId}:
    get:
      description: getDevice
      summary: getDevice
      tags:
        - Device
      operationId: getDevice
      deprecated: false
      produces:
        - application/json
      parameters:
        - name: deviceId
          in: path
          required: true
          type: string
          description: ''
      responses:
        '200':
          description: ''
          headers: {}
  /device/{deviceId}/gateway:
    post:
      description: provisionGateway
      summary: provisionGateway
      tags:
        - Device
      operationId: provisionGateway
      deprecated: false
      produces:
        - application/json
      consumes:
        - text/plain
      parameters:
        - name: deviceId
          in: path
          required: true
          type: string
          description: ''
        - name: Content-Type
          in: header
          required: false
          enum:
            - text/plain
          type: string
          description: ''
        - name: body
          in: body
          required: true
          description: ''
          schema:
            example:
              gatewayType: ''
              location: ''
              longitude: ''
              latitude: ''
              projectId: ''
              lastReading:
                '': ''
              attributes:
                '': ''
              createdBy: ''
            type: string
      responses:
        '200':
          description: ''
          headers: {}
    get:
      description: getGatewayInfo
      summary: getGatewayInfo
      tags:
        - Device
      operationId: getGatewayInfo
      deprecated: false
      produces:
        - application/json
      parameters:
        - name: deviceId
          in: path
          required: true
          type: string
          description: ''
      responses:
        '200':
          description: ''
          headers: {}
    delete:
      description: deprovisionGateway
      summary: deprovisionGateway
      tags:
        - Device
      operationId: deprovisionGateway
      deprecated: false
      produces:
        - application/json
      parameters:
        - name: deviceId
          in: path
          required: true
          type: string
          description: ''
      responses:
        '200':
          description: ''
          headers: {}
  /device/{deviceId}/asset:
    post:
      description: provisionAsset
      summary: provisionAsset
      tags:
        - Device
      operationId: provisionAsset
      deprecated: false
      produces:
        - application/json
      consumes:
        - text/plain
      parameters:
        - name: deviceId
          in: path
          required: true
          type: string
          description: ''
        - name: Content-Type
          in: header
          required: false
          enum:
            - text/plain
          type: string
          description: ''
        - name: body
          in: body
          required: true
          description: ''
          schema:
            example:
              trackingId: TEST_ASSET_1
              tuType: UNIT
              containedUnits: {}
              projectId: '{{projectId}}'
              organizationId: '{{orgId}}'
              state: ATTACHED
              currentLocation: ''
              lastReadBy: '{{deviceId}}'
              shippingInfoId: '{{shippingInfoId}}'
              createdBy: '{{userId}}'
            type: string
      responses:
        '200':
          description: ''
          headers: {}
    delete:
      description: deprovisionAsset
      summary: deprovisionAsset
      tags:
        - Device
      operationId: deprovisionAsset
      deprecated: false
      produces:
        - application/json
      parameters:
        - name: deviceId
          in: path
          required: true
          type: string
          description: ''
      responses:
        '200':
          description: ''
          headers: {}
  /devices/assets:
    post:
      description: provisionAssetsInBulk
      summary: provisionAssetsInBulk
      tags:
        - Device
      operationId: provisionAssetsInBulk
      deprecated: false
      produces:
        - application/json
      consumes:
        - text/plain
      parameters:
        - name: Content-Type
          in: header
          required: false
          enum:
            - text/plain
          type: string
          description: ''
        - name: body
          in: body
          required: true
          description: ''
          schema:
            type: string
      responses:
        '200':
          description: ''
          headers: {}
    delete:
      description: deprovisionAssetsinBulk
      summary: deprovisionAssetsinBulk
      tags:
        - Device
      operationId: deprovisionAssetsinBulk
      deprecated: false
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          description: ''
          headers: {}
  /rule:
    post:
      description: createRule
      summary: createRule
      tags:
        - Rule
      operationId: createRule
      deprecated: false
      produces:
        - application/json
      consumes:
        - text/plain
      parameters:
        - name: Content-Type
          in: header
          required: false
          enum:
            - text/plain
          type: string
          description: ''
        - name: body
          in: body
          required: true
          description: ''
          schema:
            type: string
      responses:
        '200':
          description: ''
          headers: {}
  /rule/{ruleId}:
    get:
      description: getRule
      summary: getRule
      tags:
        - Rule
      operationId: getRule
      deprecated: false
      produces:
        - application/json
      parameters:
        - name: ruleId
          in: path
          required: true
          type: string
          description: ''
      responses:
        '200':
          description: ''
          headers: {}
    patch:
      description: updateRule
      summary: updateRule
      tags:
        - Rule
      operationId: updateRule
      deprecated: false
      produces:
        - application/json
      consumes:
        - text/plain
      parameters:
        - name: ruleId
          in: path
          required: true
          type: string
          description: ''
        - name: Content-Type
          in: header
          required: false
          enum:
            - text/plain
          type: string
          description: ''
        - name: body
          in: body
          required: true
          description: ''
          schema:
            type: string
      responses:
        '200':
          description: ''
          headers: {}
    delete:
      description: deleteRule
      summary: deleteRule
      tags:
        - Rule
      operationId: deleteRule
      deprecated: false
      produces:
        - application/json
      parameters:
        - name: ruleId
          in: path
          required: true
          type: string
          description: ''
      responses:
        '200':
          description: ''
          headers: {}
  /webhook:
    post:
      description: createWebhook
      summary: createWebhook
      tags:
        - Webhooks
      operationId: createWebhook
      deprecated: false
      produces:
        - application/json
      consumes:
        - text/plain
      parameters:
        - name: Content-Type
          in: header
          required: false
          enum:
            - text/plain
          type: string
          description: ''
        - name: body
          in: body
          required: true
          description: ''
          schema:
            example:
              url: https://webhook.site/8c0043c0-b7fa-411e-83d1-85a85162d2e4
              headers: []
              eventType: CATM1_TAG_DATA_AVAILABLE
              isActive: true
              organizationId: YjNKbllXNXBlbUYwYVc5dWU0NzgyYWQwLTkzZTAtMTFlYi1iMzgyLWIzM2UwY2ZmOGQ3ZQ==
              createdBy: ZFhObGNnPT0xYTMzNWFmMC05M2UxLTExZWItYjM4Mi1iMzNlMGNmZjhkN2U=
            type: string
      responses:
        '200':
          description: ''
          headers: {}
  /webhook/{webhookId}:
    get:
      description: getWebhook
      summary: getWebhook
      tags:
        - Webhooks
      operationId: getWebhook
      deprecated: false
      produces:
        - application/json
      parameters:
        - name: webhookId
          in: path
          required: true
          type: string
          description: ''
      responses:
        '200':
          description: ''
          headers: {}
    patch:
      description: updateWebhook
      summary: updateWebhook
      tags:
        - Webhooks
      operationId: updateWebhook
      deprecated: false
      produces:
        - application/json
      consumes:
        - text/plain
      parameters:
        - name: webhookId
          in: path
          required: true
          type: string
          description: ''
        - name: Content-Type
          in: header
          required: false
          enum:
            - text/plain
          type: string
          description: ''
        - name: body
          in: body
          required: true
          description: ''
          schema:
            example: |-
              {
                  "url": "",
                  "headers": [
                      {"key": "value"},
                      {"key": "value"}
                  ],
                  "eventType" :"",
                  "isActive": "",
                  "organization": {{orgId}},
                  "createdBy": {{userId}}
              }
            type: string
      responses:
        '200':
          description: ''
          headers: {}
    delete:
      description: deleteWebhook
      summary: deleteWebhook
      tags:
        - Webhooks
      operationId: deleteWebhook
      deprecated: false
      produces:
        - application/json
      parameters:
        - name: webhookId
          in: path
          required: true
          type: string
          description: ''
      responses:
        '200':
          description: ''
          headers: {}
  /config:
    get:
      description: getDeviceConfig
      summary: getDeviceConfig
      tags:
        - Configuration
      operationId: getDeviceConfig
      deprecated: false
      produces:
        - application/json
      parameters:
        - name: device
          in: query
          required: true
          type: string
          description: ''
      responses:
        '200':
          description: ''
          headers: {}
    post:
      description: createDeviceConfig
      summary: createDeviceConfig
      tags:
        - Configuration
      operationId: createDeviceConfig
      deprecated: false
      produces:
        - application/json
      consumes:
        - text/plain
      parameters:
        - name: Content-Type
          in: header
          required: false
          enum:
            - text/plain
          type: string
          description: ''
        - name: body
          in: body
          required: true
          description: ''
          schema:
            example:
              deviceId: ''
              payload: {}
            type: string
      responses:
        '200':
          description: ''
          headers: {}
tags:
  - name: Authentication
    description: ''
  

   
        
             
    

    

   


  
    
  
  
  
    
  
    
  
    
  
    
  
    

   
        
             
    

    

   

